package com.example.oop.repositories;

import com.example.oop.Properties;
import com.example.oop.entities.ApplicationEntity;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ApplicationRepository {
    public static final Properties properties = Properties.getInstance();

    public ApplicationRepository() {
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
        try (Connection connection = DriverManager.getConnection(
                properties.getDatabaseUrl(),
                properties.getDatabaseUsername(),
                properties.getDatabasePassword());
             Statement statement = connection.createStatement()) {
            statement.execute("""
                    create table if not exists application
                    (
                        id               bigint generated by default as identity primary key,
                        duration_in_days bigint,
                        is_accepted      boolean,
                        scale            bigint,
                        type             varchar(255)
                    );
                    """);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<ApplicationEntity> finAll() {
        try (Connection connection = DriverManager.getConnection(
                properties.getDatabaseUrl(),
                properties.getDatabaseUsername(),
                properties.getDatabasePassword());
             Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery("SELECT * FROM application;");
            ArrayList<ApplicationEntity> result = new ArrayList<>();
            while (resultSet.next()) {
                boolean isAcceptedFromDB = resultSet.getBoolean("is_accepted");
                Boolean isAccepted;
                if (resultSet.wasNull()) {
                    isAccepted = null;
                } else {
                    isAccepted = isAcceptedFromDB;
                }
                ApplicationEntity e = new ApplicationEntity(
                        resultSet.getLong("id"),
                        resultSet.getString("type"),
                        resultSet.getLong("scale"),
                        resultSet.getLong("duration_in_days"),
                        isAccepted);
                result.add(e);
            }
            return result;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void insert(String type, Long scale, Long durationInDays) {
        try (Connection connection = DriverManager.getConnection(
                Properties.getInstance().getDatabaseUrl(),
                Properties.getInstance().getDatabaseUsername(),
                Properties.getInstance().getDatabasePassword());
             Statement statement = connection.createStatement()) {
            statement.execute(
                    "INSERT INTO application (type, scale, duration_in_days) VALUES ('%s', %s, %s);"
                            .formatted(type, scale, durationInDays));
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void disable(Long id) {
        try (Connection connection = DriverManager.getConnection(
                Properties.getInstance().getDatabaseUrl(),
                Properties.getInstance().getDatabaseUsername(),
                Properties.getInstance().getDatabasePassword());
             Statement statement = connection.createStatement()) {
            statement.execute(
                    "UPDATE application SET is_accepted = false WHERE id = %s;"
                            .formatted(id));
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void enable(Long id) {
        try (Connection connection = DriverManager.getConnection(
                Properties.getInstance().getDatabaseUrl(),
                Properties.getInstance().getDatabaseUsername(),
                Properties.getInstance().getDatabasePassword());
             Statement statement = connection.createStatement()) {
            statement.execute(
                    "UPDATE application SET is_accepted = true WHERE id = %s;"
                            .formatted(id));
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
